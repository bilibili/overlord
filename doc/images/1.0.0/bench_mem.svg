<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs >
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
</style>
<script type="text/ecmascript">
<![CDATA[
	var details, searchbtn, matchedtxt, svg;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	// mouse-over for info
	function s(node) {		// show
		info = g_to_text(node);
		details.nodeValue = "Function: " + info;
	}
	function c() {			// clear
		details.nodeValue = ' ';
	}

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	})

	// functions
	function find_child(parent, name, attr) {
		var children = parent.childNodes;
		for (var i=0; i<children.length;i++) {
			if (children[i].tagName == name)
				return (attr != undefined) ? children[i].attributes[attr].value : children[i];
		}
		return;
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_"+attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_"+attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_"+attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes["width"].value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;

		// Smaller than this size won't fit anything
		if (w < 2*12*0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x=txt.length-2; x>0; x--) {
			if (t.getSubStringLength(0, x+2) <= w) {
				t.textContent = txt.substring(0,x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - 10) * ratio + 10;
				if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_child(c[i], x-10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = 10;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseInt(svg.width.baseVal.value) - (10*2);
			}
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr["width"].value);
		var xmin = parseFloat(attr["x"].value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr["y"].value);
		var ratio = (svg.width.baseVal.value - 2*10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "1.0";

		var el = document.getElementsByTagName("g");
		for(var i=0;i<el.length;i++){
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a["x"].value);
			var ew = parseFloat(a["width"].value);
			// Is it an ancestor
			if (0 == 0) {
				var upstack = parseFloat(a["y"].value) > ymin;
			} else {
				var upstack = parseFloat(a["y"].value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.style["opacity"] = "0.5";
					zoom_parent(e);
					e.onclick = function(e){unzoom(); zoom(this);};
					update_text(e);
				}
				// not in current path
				else
					e.style["display"] = "none";
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.style["display"] = "none";
				}
				else {
					zoom_child(e, xmin, ratio);
					e.onclick = function(e){zoom(this);};
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "0.0";

		var el = document.getElementsByTagName("g");
		for(i=0;i<el.length;i++) {
			el[i].style["display"] = "block";
			el[i].style["opacity"] = "1";
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.getElementsByTagName("rect");
		for (var i=0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.style["opacity"] = "0.1";
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.style["opacity"] = "0.0";
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementsByTagName("g");
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			if (e.attributes["class"].value != "func_g")
				continue;
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (rect == null) {
				// the rect might be wrapped in an anchor
				// if nameattr href is being used
				if (rect = find_child(e, "a")) {
				    rect = find_child(r, "rect");
				}
			}
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes["width"].value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes["x"].value);
				orig_save(rect, "fill");
				rect.attributes["fill"].value =
				    "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.style["opacity"] = "1.0";
		searchbtn.firstChild.nodeValue = "Reset Search"

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.style["opacity"] = "1.0";
		pct = 100 * count / maxwidth;
		if (pct == 100)
			pct = "100"
		else
			pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
	function searchover(e) {
		searchbtn.style["opacity"] = "1.0";
	}
	function searchout(e) {
		if (searching) {
			searchbtn.style["opacity"] = "1.0";
		} else {
			searchbtn.style["opacity"] = "0.1";
		}
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="310.0" fill="url(#background)"  />
<text text-anchor="middle" x="600.00" y="24" font-size="17" font-family="Verdana" fill="rgb(0,0,0)"  >Flame Graph</text>
<text text-anchor="" x="10.00" y="293" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="details" > </text>
<text text-anchor="" x="10.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="unzoom" onclick="unzoom()" style="opacity:0.0;cursor:pointer" >Reset Zoom</text>
<text text-anchor="" x="1090.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="search" onmouseover="searchover()" onmouseout="searchout()" onclick="search_prompt()" style="opacity:0.1;cursor:pointer" >Search</text>
<text text-anchor="" x="1090.00" y="293" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="matched" > </text>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>net.sockaddrToTCP (21,846 samples, 0.01%)</title><rect x="1189.8" y="37" width="0.1" height="15.0" fill="rgb(219,24,11)" rx="2" ry="2" />
<text text-anchor="" x="1192.79" y="47.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/proto/memcache.retrievalRequest (24,577 samples, 0.01%)</title><rect x="449.7" y="213" width="0.1" height="15.0" fill="rgb(225,155,20)" rx="2" ry="2" />
<text text-anchor="" x="452.66" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>net.(*Dialer).Dial (70,998 samples, 0.03%)</title><rect x="1189.6" y="181" width="0.3" height="15.0" fill="rgb(230,102,38)" rx="2" ry="2" />
<text text-anchor="" x="1192.56" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>net.internetSocket (36,864 samples, 0.01%)</title><rect x="1189.7" y="85" width="0.2" height="15.0" fill="rgb(207,45,43)" rx="2" ry="2" />
<text text-anchor="" x="1192.72" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/lib/conv.init.0 (557,070 samples, 0.22%)</title><rect x="1186.7" y="181" width="2.6" height="15.0" fill="rgb(230,63,22)" rx="2" ry="2" />
<text text-anchor="" x="1189.74" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>fmt.Sprintf (31,737,745 samples, 12.56%)</title><rect x="746.1" y="197" width="148.1" height="15.0" fill="rgb(249,36,46)" rx="2" ry="2" />
<text text-anchor="" x="749.06" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >fmt.Sprintf</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>runtime.systemstack (25,942 samples, 0.01%)</title><rect x="1189.4" y="229" width="0.1" height="15.0" fill="rgb(212,11,53)" rx="2" ry="2" />
<text text-anchor="" x="1192.41" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>strconv.formatBits (557,064 samples, 0.22%)</title><rect x="1186.7" y="133" width="2.6" height="15.0" fill="rgb(244,153,9)" rx="2" ry="2" />
<text text-anchor="" x="1189.74" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/vendor/github.com/pkg/errors.Wrapf (157,661,434 samples, 62.38%)</title><rect x="449.8" y="213" width="736.1" height="15.0" fill="rgb(248,199,32)" rx="2" ry="2" />
<text text-anchor="" x="452.81" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >github.com/felixhao/overlord/vendor/github.com/pkg/errors.Wrapf</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/proxy.(*Handler).handleRequest (28,319 samples, 0.01%)</title><rect x="1185.9" y="245" width="0.1" height="15.0" fill="rgb(208,120,12)" rx="2" ry="2" />
<text text-anchor="" x="1188.85" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>net.doDialTCP (36,864 samples, 0.01%)</title><rect x="1189.7" y="101" width="0.2" height="15.0" fill="rgb(247,64,52)" rx="2" ry="2" />
<text text-anchor="" x="1192.72" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>net.socket (36,864 samples, 0.01%)</title><rect x="1189.7" y="69" width="0.2" height="15.0" fill="rgb(225,74,27)" rx="2" ry="2" />
<text text-anchor="" x="1192.72" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/proxy.(*Proxy).serve (155,481 samples, 0.06%)</title><rect x="1186.0" y="245" width="0.7" height="15.0" fill="rgb(205,100,54)" rx="2" ry="2" />
<text text-anchor="" x="1189.01" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>net.(*netFD).dial (32,768 samples, 0.01%)</title><rect x="1189.7" y="53" width="0.2" height="15.0" fill="rgb(211,98,35)" rx="2" ry="2" />
<text text-anchor="" x="1192.74" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>runtime.main (573,464 samples, 0.23%)</title><rect x="1186.7" y="245" width="2.7" height="15.0" fill="rgb(231,46,8)" rx="2" ry="2" />
<text text-anchor="" x="1189.74" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>net.dialTCP (36,864 samples, 0.01%)</title><rect x="1189.7" y="117" width="0.2" height="15.0" fill="rgb(254,4,26)" rx="2" ry="2" />
<text text-anchor="" x="1192.72" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/vendor/github.com/pkg/errors.callers (62,466,521 samples, 24.71%)</title><rect x="894.2" y="197" width="291.7" height="15.0" fill="rgb(249,108,50)" rx="2" ry="2" />
<text text-anchor="" x="897.23" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >github.com/felixhao/overlord/vendor/git..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>net.(*Dialer).DialContext (70,998 samples, 0.03%)</title><rect x="1189.6" y="165" width="0.3" height="15.0" fill="rgb(252,6,39)" rx="2" ry="2" />
<text text-anchor="" x="1192.56" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/proxy.(*Cluster).Put (32,769 samples, 0.01%)</title><rect x="10.1" y="213" width="0.2" height="15.0" fill="rgb(218,13,54)" rx="2" ry="2" />
<text text-anchor="" x="13.10" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/proto/memcache.(*handler).Handle (21,975 samples, 0.01%)</title><rect x="10.0" y="213" width="0.1" height="15.0" fill="rgb(232,203,51)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>net.(*TCPListener).Accept (24,577 samples, 0.01%)</title><rect x="1186.6" y="229" width="0.1" height="15.0" fill="rgb(232,88,49)" rx="2" ry="2" />
<text text-anchor="" x="1189.62" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/proto.(*Request).DoneWithError (31,141,948 samples, 12.32%)</title><rect x="154.5" y="229" width="145.4" height="15.0" fill="rgb(220,70,47)" rx="2" ry="2" />
<text text-anchor="" x="157.52" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >github.com/felixha..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>main.init (573,459 samples, 0.23%)</title><rect x="1186.7" y="229" width="2.7" height="15.0" fill="rgb(246,60,12)" rx="2" ry="2" />
<text text-anchor="" x="1189.74" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/lib/conv.init (557,070 samples, 0.22%)</title><rect x="1186.7" y="197" width="2.6" height="15.0" fill="rgb(228,70,52)" rx="2" ry="2" />
<text text-anchor="" x="1189.74" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/proxy.(*Handler).dispatchRequest (54,748 samples, 0.02%)</title><rect x="10.0" y="245" width="0.3" height="15.0" fill="rgb(237,135,12)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>all (252,759,472 samples, 100%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(208,130,39)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>net.dialSerial (42,325 samples, 0.02%)</title><rect x="1189.7" y="149" width="0.2" height="15.0" fill="rgb(224,189,41)" rx="2" ry="2" />
<text text-anchor="" x="1192.69" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/proxy.init (573,459 samples, 0.23%)</title><rect x="1186.7" y="213" width="2.7" height="15.0" fill="rgb(245,17,50)" rx="2" ry="2" />
<text text-anchor="" x="1189.74" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/proxy_test.testCmd (76,138 samples, 0.03%)</title><rect x="1189.5" y="213" width="0.4" height="15.0" fill="rgb(254,75,25)" rx="2" ry="2" />
<text text-anchor="" x="1192.53" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>strconv.Itoa (557,064 samples, 0.22%)</title><rect x="1186.7" y="165" width="2.6" height="15.0" fill="rgb(214,212,23)" rx="2" ry="2" />
<text text-anchor="" x="1189.74" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/proxy_test.BenchmarkCmdGet.func1 (76,138 samples, 0.03%)</title><rect x="1189.5" y="229" width="0.4" height="15.0" fill="rgb(231,77,29)" rx="2" ry="2" />
<text text-anchor="" x="1192.53" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>strconv.FormatInt (557,064 samples, 0.22%)</title><rect x="1186.7" y="149" width="2.6" height="15.0" fill="rgb(217,117,10)" rx="2" ry="2" />
<text text-anchor="" x="1189.74" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/proxy.NewHandler (114,511 samples, 0.05%)</title><rect x="1186.1" y="229" width="0.5" height="15.0" fill="rgb(243,15,3)" rx="2" ry="2" />
<text text-anchor="" x="1189.09" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/proto/memcache.(*decoder).Decode (157,701,685 samples, 62.39%)</title><rect x="449.6" y="229" width="736.3" height="15.0" fill="rgb(214,214,35)" rx="2" ry="2" />
<text text-anchor="" x="452.63" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >github.com/felixhao/overlord/proto/memcache.(*decoder).Decode</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>net.(*TCPListener).accept (24,577 samples, 0.01%)</title><rect x="1186.6" y="213" width="0.1" height="15.0" fill="rgb(248,16,28)" rx="2" ry="2" />
<text text-anchor="" x="1189.62" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>net.(*netFD).accept (24,577 samples, 0.01%)</title><rect x="1186.6" y="197" width="0.1" height="15.0" fill="rgb(247,100,15)" rx="2" ry="2" />
<text text-anchor="" x="1189.62" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>context.WithCancel (73,729 samples, 0.03%)</title><rect x="1186.3" y="213" width="0.3" height="15.0" fill="rgb(236,38,53)" rx="2" ry="2" />
<text text-anchor="" x="1189.28" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>testing.(*B).RunParallel.func1 (99,702 samples, 0.04%)</title><rect x="1189.5" y="245" width="0.5" height="15.0" fill="rgb(206,112,3)" rx="2" ry="2" />
<text text-anchor="" x="1192.53" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/proxy.(*Handler).handleRequest (54,748 samples, 0.02%)</title><rect x="10.0" y="229" width="0.3" height="15.0" fill="rgb(239,16,42)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/proto.(*Request).Process (32,014,824 samples, 12.67%)</title><rect x="299.9" y="229" width="149.5" height="15.0" fill="rgb(239,22,28)" rx="2" ry="2" />
<text text-anchor="" x="302.90" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >github.com/felixhao..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/proto.(*RequestChan).PushBack (56,239 samples, 0.02%)</title><rect x="449.4" y="229" width="0.2" height="15.0" fill="rgb(230,84,38)" rx="2" ry="2" />
<text text-anchor="" x="452.36" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>net.dialSingle (36,864 samples, 0.01%)</title><rect x="1189.7" y="133" width="0.2" height="15.0" fill="rgb(236,42,9)" rx="2" ry="2" />
<text text-anchor="" x="1192.72" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>net.DialTimeout (70,998 samples, 0.03%)</title><rect x="1189.6" y="197" width="0.3" height="15.0" fill="rgb(247,34,6)" rx="2" ry="2" />
<text text-anchor="" x="1192.56" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>runtime.mstart (25,942 samples, 0.01%)</title><rect x="1189.4" y="245" width="0.1" height="15.0" fill="rgb(250,142,5)" rx="2" ry="2" />
<text text-anchor="" x="1192.41" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/proxy.(*Handler).handleReader (251,816,334 samples, 99.63%)</title><rect x="10.3" y="245" width="1175.6" height="15.0" fill="rgb(223,91,2)" rx="2" ry="2" />
<text text-anchor="" x="13.26" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >github.com/felixhao/overlord/proxy.(*Handler).handleReader</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>github.com/felixhao/overlord/lib/pool.(*Pool).Put (32,769 samples, 0.01%)</title><rect x="10.1" y="197" width="0.2" height="15.0" fill="rgb(240,169,29)" rx="2" ry="2" />
<text text-anchor="" x="13.10" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
</svg>
